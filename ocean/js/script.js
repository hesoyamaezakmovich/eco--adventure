// –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã
const ecoFacts = [
    "–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ –æ–∫–µ–∞–Ω –ø–æ–ø–∞–¥–∞–µ—Ç —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ–¥–Ω–æ–≥–æ –º—É—Å–æ—Ä–æ–≤–æ–∑–∞ –ø–ª–∞—Å—Ç–∏–∫–∞!",
    "–ö 2050 –≥–æ–¥—É –≤ –æ–∫–µ–∞–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–ª–∞—Å—Ç–∏–∫–∞, —á–µ–º —Ä—ã–±—ã (–ø–æ –≤–µ—Å—É).",
    "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã —É–±–∏–≤–∞—é—Ç –±–æ–ª–µ–µ 1 –º–∏–ª–ª–∏–æ–Ω–∞ –º–æ—Ä—Å–∫–∏—Ö –ø—Ç–∏—Ü –∏ 100,000 –º–æ—Ä—Å–∫–∏—Ö –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏—Ö –µ–∂–µ–≥–æ–¥–Ω–æ.",
    "–ü–ª–∞—Å—Ç–∏–∫ –≤ –æ–∫–µ–∞–Ω–µ —Ä–∞—Å–ø–∞–¥–∞–µ—Ç—Å—è –Ω–∞ –º–∏–∫—Ä–æ–ø–ª–∞—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ø–∏—â–µ–≤—É—é —Ü–µ–ø–æ—á–∫—É.",
    "–ë–æ–ª—å—à–æ–µ —Ç–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–µ –º—É—Å–æ—Ä–Ω–æ–µ –ø—è—Ç–Ω–æ –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –§—Ä–∞–Ω—Ü–∏–∏!",
    "80% –ø–ª–∞—Å—Ç–∏–∫–∞ –≤ –æ–∫–µ–∞–Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç —Ç—É–¥–∞ —Å —Å—É—à–∏, –∞ –Ω–µ —Å –∫–æ—Ä–∞–±–ª–µ–π.",
    "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞ –º–æ–∂–µ—Ç –ø–ª–∞–≤–∞—Ç—å –≤ –æ–∫–µ–∞–Ω–µ —Å–æ—Ç–Ω–∏ –ª–µ—Ç, –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞—Å–ø–∞–¥–∞—è—Å—å –Ω–∞ –º–∏–∫—Ä–æ–ø–ª–∞—Å—Ç–∏–∫.",
    "–ö–∞–∂–¥—ã–π –≥–æ–¥ –≤ –æ–∫–µ–∞–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –æ–∫–æ–ª–æ 8 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ç–æ–Ω–Ω –ø–ª–∞—Å—Ç–∏–∫–∞."
];

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let canvas, ctx;
let gameLoop;
let isPaused = false;
let gameTime = 60;
let score = 0;
let collectedTrash = 0;
let savedAnimals = 0;

// –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
let items = [];
let particles = [];

// –¢–∏–ø—ã –º—É—Å–æ—Ä–∞
const trashTypes = [
    { emoji: "ü•§", points: 10, type: "trash" },
    { emoji: "üß¥", points: 10, type: "trash" },
    { emoji: "ü•´", points: 10, type: "trash" },
    { emoji: "üõçÔ∏è", points: 10, type: "trash" },
    { emoji: "üíä", points: 10, type: "trash" },
    { emoji: "üîã", points: 15, type: "trash" },
    { emoji: "üì±", points: 15, type: "trash" }
];

// –ú–æ—Ä—Å–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ (–∏—Ö –Ω–µ–ª—å–∑—è —Å–æ–±–∏—Ä–∞—Ç—å)
const animalTypes = [
    { emoji: "üêü", penalty: -20, type: "animal" },
    { emoji: "üê†", penalty: -20, type: "animal" },
    { emoji: "üê°", penalty: -20, type: "animal" },
    { emoji: "ü¶à", penalty: -25, type: "animal" },
    { emoji: "üêô", penalty: -20, type: "animal" },
    { emoji: "üê¢", penalty: -30, type: "animal" },
    { emoji: "ü¶Ä", penalty: -20, type: "animal" }
];

class Item {
    constructor() {
        this.x = Math.random() * (canvas.width - 60) + 30;
        this.y = -50;
        this.size = 40;
        this.speed = Math.random() * 2 + 1;

        // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä: –º—É—Å–æ—Ä –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ (70% –º—É—Å–æ—Ä, 30% –∂–∏–≤–æ—Ç–Ω–æ–µ)
        if (Math.random() < 0.7) {
            const trash = trashTypes[Math.floor(Math.random() * trashTypes.length)];
            this.emoji = trash.emoji;
            this.points = trash.points;
            this.type = trash.type;
        } else {
            const animal = animalTypes[Math.floor(Math.random() * animalTypes.length)];
            this.emoji = animal.emoji;
            this.points = animal.penalty;
            this.type = animal.type;
        }
    }

    update() {
        this.y += this.speed;
    }

    draw() {
        ctx.font = `${this.size}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(this.emoji, this.x, this.y);
    }

    isClicked(mouseX, mouseY) {
        const distance = Math.sqrt(
            Math.pow(mouseX - this.x, 2) +
            Math.pow(mouseY - this.y, 2)
        );
        return distance < this.size;
    }

    isOffScreen() {
        return this.y > canvas.height + 50;
    }
}

class Particle {
    constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.vx = (Math.random() - 0.5) * 5;
        this.vy = (Math.random() - 0.5) * 5;
        this.alpha = 1;
        this.color = color;
        this.size = Math.random() * 5 + 3;
    }

    update() {
        this.x += this.vx;
        this.y += this.vy;
        this.alpha -= 0.02;
        this.vy += 0.1; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
    }

    draw() {
        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
    }

    isDead() {
        return this.alpha <= 0;
    }
}

// –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
function startGame() {
    // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    gameTime = 60;
    score = 0;
    collectedTrash = 0;
    savedAnimals = 0;
    items = [];
    particles = [];
    isPaused = false;

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
    showScreen('game-screen');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas (–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞)
    setTimeout(() => {
        canvas = document.getElementById('game-canvas');
        ctx = canvas.getContext('2d');

        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã canvas
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        canvas.removeEventListener('click', handleClick);
        canvas.removeEventListener('touchstart', handleTouch);
        canvas.addEventListener('click', handleClick);
        canvas.addEventListener('touchstart', handleTouch);

        // –û–±–Ω–æ–≤–∏—Ç—å UI
        updateUI();

        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
        startGameLoop();
        startTimer();
    }, 100);
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function startGameLoop() {
    gameLoop = setInterval(() => {
        if (!isPaused) {
            update();
            draw();
        }
    }, 1000 / 60); // 60 FPS
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function update() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (Math.random() < 0.02) {
        items.push(new Item());
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    items.forEach((item, index) => {
        item.update();
        if (item.isOffScreen()) {
            items.splice(index, 1);
            // –ï—Å–ª–∏ –º—É—Å–æ—Ä —É–ø–∞–ª - –∂–∏–≤–æ—Ç–Ω—ã–µ —Å–ø–∞—Å–µ–Ω—ã!
            if (item.type === 'trash') {
                savedAnimals++;
            }
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
    particles.forEach((particle, index) => {
        particle.update();
        if (particle.isDead()) {
            particles.splice(index, 1);
        }
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞
function draw() {
    // –û—á–∏—Å—Ç–∫–∞ canvas
    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
    gradient.addColorStop(0, '#4db8ff');
    gradient.addColorStop(1, '#0077be');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º "–ø—É–∑—ã—Ä—å–∫–∏" –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–æ–¥—ã
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    for (let i = 0; i < 10; i++) {
        const x = Math.random() * canvas.width;
        const y = (Date.now() / 1000 + i * 50) % canvas.height;
        const size = Math.random() * 10 + 5;
        ctx.beginPath();
        ctx.arc(x, y, size, 0, Math.PI * 2);
        ctx.fill();
    }

    // –†–∏—Å—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    items.forEach(item => item.draw());

    // –†–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
    particles.forEach(particle => particle.draw());
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function handleClick(event) {
    if (isPaused) return;

    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;

    checkItemClick(mouseX, mouseY);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏—è
function handleTouch(event) {
    event.preventDefault();
    if (isPaused) return;

    const rect = canvas.getBoundingClientRect();
    const touch = event.touches[0];
    const mouseX = touch.clientX - rect.left;
    const mouseY = touch.clientY - rect.top;

    checkItemClick(mouseX, mouseY);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
function checkItemClick(mouseX, mouseY) {
    for (let i = items.length - 1; i >= 0; i--) {
        const item = items[i];
        if (item.isClicked(mouseX, mouseY)) {
            if (item.type === 'trash') {
                // –°–æ–±—Ä–∞–Ω –º—É—Å–æ—Ä - —Ö–æ—Ä–æ—à–æ!
                score += item.points;
                collectedTrash++;
                createParticles(item.x, item.y, '#4caf50');
            } else {
                // –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ - –ø–ª–æ—Ö–æ!
                score += item.points;
                createParticles(item.x, item.y, '#f44336');
            }
            items.splice(i, 1);
            updateUI();
            break;
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
function createParticles(x, y, color) {
    for (let i = 0; i < 10; i++) {
        particles.push(new Particle(x, y, color));
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    document.getElementById('score').textContent = score;
    document.getElementById('time').textContent = gameTime;
    document.getElementById('collected').textContent = collectedTrash;
}

// –¢–∞–π–º–µ—Ä
let timerInterval;
function startTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    timerInterval = setInterval(() => {
        if (!isPaused) {
            gameTime--;
            updateUI();

            if (gameTime <= 0) {
                clearInterval(timerInterval);
                endGame();
            }
        }
    }, 1000);
}

// –ü–∞—É–∑–∞
function togglePause() {
    isPaused = !isPaused;
    const pauseScreen = document.getElementById('pause-screen');
    pauseScreen.classList.toggle('hidden');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
function quitGame() {
    if (gameLoop) {
        clearInterval(gameLoop);
    }
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    isPaused = false;
    document.getElementById('pause-screen').classList.add('hidden');
    showScreen('welcome-screen');
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function endGame() {
    if (gameLoop) {
        clearInterval(gameLoop);
    }
    if (timerInterval) {
        clearInterval(timerInterval);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('final-score').textContent = score;
    document.getElementById('final-collected').textContent = collectedTrash;
    document.getElementById('final-saved').textContent = savedAnimals;

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    let title, text;
    if (collectedTrash >= 100) {
        title = 'üåü –ì–µ—Ä–æ–π –æ–∫–µ–∞–Ω–∞!';
        text = '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞ –∏ —Å–¥–µ–ª–∞–ª–∏ –æ–∫–µ–∞–Ω —á–∏—â–µ!';
    } else if (collectedTrash >= 50) {
        title = 'üåä –ó–∞—â–∏—Ç–Ω–∏–∫ –æ–∫–µ–∞–Ω–∞!';
        text = '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —Å–æ–±—Ä–∞–ª–∏ –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –∏ –ø–æ–º–æ–≥–ª–∏ –º–æ—Ä—Å–∫–∏–º –æ–±–∏—Ç–∞—Ç–µ–ª—è–º!';
    } else if (collectedTrash >= 25) {
        title = 'üêü –î—Ä—É–≥ –æ–∫–µ–∞–Ω–∞';
        text = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –≤–Ω–µ—Å–ª–∏ –≤–∫–ª–∞–¥ –≤ –æ—á–∏—Å—Ç–∫—É –æ–∫–µ–∞–Ω–∞!';
    } else {
        title = 'üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π —ç–∫–æ–ª–æ–≥';
        text = '–ù–µ–ø–ª–æ—Ö–æ–π —Å—Ç–∞—Ä—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –±–æ–ª—å—à–µ –º—É—Å–æ—Ä–∞!';
    }

    document.getElementById('achievement-title').textContent = title;
    document.getElementById('achievement-text').textContent = text;

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
    const randomFact = ecoFacts[Math.floor(Math.random() * ecoFacts.length)];
    document.getElementById('eco-fact-text').textContent = randomFact;

    showScreen('final-screen');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.add('hidden');
    });
    document.getElementById(screenId).classList.remove('hidden');
}

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
window.addEventListener('resize', () => {
    if (canvas && ctx) {
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
    }
});
