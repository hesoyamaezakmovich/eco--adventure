// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤
const wasteDatabase = {
    recycling: {
        name: '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞',
        items: [
            { id: 'plastic_bottle', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞', hint: '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ PET –∏–ª–∏ HDPE', icon: 'üç∂' },
            { id: 'glass_jar', name: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±–∞–Ω–∫–∞', hint: '–°—Ç–µ–∫–ª–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑', icon: 'ü•õ' },
            { id: 'newspaper', name: '–ì–∞–∑–µ—Ç–∞', hint: '–ë—É–º–∞–∂–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è', icon: 'üì∞' },
            { id: 'metal_can', name: '–ö–æ–Ω—Å–µ—Ä–≤–Ω–∞—è –±–∞–Ω–∫–∞', hint: '–ú–µ—Ç–∞–ª–ª –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ–ø–ª–∞–≤–∫–µ', icon: 'ü•´' },
            { id: 'cardboard', name: '–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞', hint: '–ü—Ä–µ—Å—Å–æ–≤–∞–Ω–Ω–∞—è –±—É–º–∞–≥–∞', icon: 'üì¶' },
            { id: 'milk_carton', name: '–ü–∞–∫–µ—Ç –æ—Ç –º–æ–ª–æ–∫–∞', hint: '–¢–µ—Ç—Ä–∞–ø–∞–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å', icon: 'ü•õ' },
            { id: 'aluminum_can', name: '–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è –±–∞–Ω–∫–∞', hint: '–ü–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ–ø–ª–∞–≤–∫–µ', icon: 'ü•§' },
            { id: 'magazine', name: '–ñ—É—Ä–Ω–∞–ª', hint: '–ì–ª—è–Ω—Ü–µ–≤–∞—è –±—É–º–∞–≥–∞ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', icon: 'üìñ' },
            { id: 'plastic_container', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', hint: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É PP –∏–ª–∏ PS', icon: 'ü•°' },
            { id: 'wine_bottle', name: '–í–∏–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞', hint: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —Ç–∞—Ä–∞', icon: 'üçæ' },
            { id: 'tin_foil', name: '–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è —Ñ–æ–ª—å–≥–∞', hint: '–ú–µ—Ç–∞–ª–ª –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏', icon: 'üìÑ' },
            { id: 'plastic_bag', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç', hint: 'LDPE –ø–ª–∞—Å—Ç–∏–∫', icon: 'üõçÔ∏è' },
            { id: 'envelope', name: '–ö–æ–Ω–≤–µ—Ä—Ç', hint: '–ë—É–º–∞–∂–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è', icon: '‚úâÔ∏è' },
            { id: 'beer_can', name: '–ü–∏–≤–Ω–∞—è –±–∞–Ω–∫–∞', hint: '–ê–ª—é–º–∏–Ω–∏–π –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ', icon: 'üç∫' },
            { id: 'glass_bottle', name: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞', hint: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —Ç–∞—Ä–∞', icon: 'üçæ' },
            { id: 'plastic_toys', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∏–≥—Ä—É—à–∫–∏', hint: '–¢–≤–µ—Ä–¥—ã–π –ø–ª–∞—Å—Ç–∏–∫', icon: 'üé≤' },
            { id: 'metal_caps', name: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫—Ä—ã—à–∫–∏', hint: '–ú–µ—Ç–∞–ª–ª –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏', icon: '‚≠ï' },
            { id: 'paper_bag', name: '–ë—É–º–∞–∂–Ω—ã–π –ø–∞–∫–µ—Ç', hint: '–ö—Ä–∞—Ñ—Ç-–±—É–º–∞–≥–∞', icon: 'üõçÔ∏è' },
            { id: 'yogurt_cup', name: '–°—Ç–∞–∫–∞–Ω—á–∏–∫ –æ—Ç –π–æ–≥—É—Ä—Ç–∞', hint: '–ü–ª–∞—Å—Ç–∏–∫ PP', icon: 'ü•õ' },
            { id: 'shampoo_bottle', name: '–ë—É—Ç—ã–ª–∫–∞ –æ—Ç —à–∞–º–ø—É–Ω—è', hint: 'HDPE –ø–ª–∞—Å—Ç–∏–∫', icon: 'üß¥' }
        ]
    },
    organic: {
        name: '–û—Ä–≥–∞–Ω–∏–∫–∞',
        items: [
            { id: 'banana_peel', name: '–ë–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞', hint: '–ü—Ä–∏—Ä–æ–¥–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ', icon: 'üçå' },
            { id: 'apple_core', name: '–Ø–±–ª–æ—á–Ω—ã–π –æ–≥—Ä—ã–∑–æ–∫', hint: '–ö–æ–º–ø–æ—Å—Ç–∏—Ä—É–µ–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –µ–¥—ã', icon: 'üçé' },
            { id: 'tea_bags', name: '–ß–∞–π–Ω—ã–µ –ø–∞–∫–µ—Ç–∏–∫–∏', hint: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', icon: 'üçµ' },
            { id: 'coffee_grounds', name: '–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞', hint: '–û—Ç–ª–∏—á–Ω–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ', icon: '‚òï' },
            { id: 'egg_shells', name: '–Ø–∏—á–Ω–∞—è —Å–∫–æ—Ä–ª—É–ø–∞', hint: '–ò—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–ª—å—Ü–∏—è –¥–ª—è –∫–æ–º–ø–æ—Å—Ç–∞', icon: 'ü•ö' },
            { id: 'vegetable_peels', name: '–û–≤–æ—â–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏', hint: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–º–ø–æ—Å—Ç–∞', icon: 'ü•ï' },
            { id: 'orange_peel', name: '–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞', hint: '–¶–∏—Ç—Ä—É—Å–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏', icon: 'üçä' },
            { id: 'grass_clippings', name: '–°–∫–æ—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞', hint: '–°–∞–¥–æ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã', icon: 'üå±' },
            { id: 'fallen_leaves', name: '–û–ø–∞–≤—à–∏–µ –ª–∏—Å—Ç—å—è', hint: '–°–∞–¥–æ–≤—ã–π –º—É—Å–æ—Ä', icon: 'üçÇ' },
            { id: 'bread_crusts', name: '–•–ª–µ–±–Ω—ã–µ –∫–æ—Ä–∫–∏', hint: '–ü–∏—â–µ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏', icon: 'üçû' },
            { id: 'fish_bones', name: '–†—ã–±–Ω—ã–µ –∫–æ—Å—Ç–∏', hint: '–û—Å—Ç–∞—Ç–∫–∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–æ–≤', icon: 'üêü' },
            { id: 'meat_scraps', name: '–û–±—Ä–µ–∑–∫–∏ –º—è—Å–∞', hint: '–ü–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã', icon: 'ü•©' },
            { id: 'nut_shells', name: '–°–∫–æ—Ä–ª—É–ø–∞ –æ—Ä–µ—Ö–æ–≤', hint: '–¢–≤–µ—Ä–¥—ã–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã', icon: 'ü•ú' },
            { id: 'fruit_pits', name: '–ö–æ—Å—Ç–æ—á–∫–∏ —Ñ—Ä—É–∫—Ç–æ–≤', hint: '–°–µ–º–µ–Ω–∞ –∏ –∫–æ—Å—Ç–æ—á–∫–∏', icon: 'üçë' },
            { id: 'corn_cobs', name: '–ö—É–∫—É—Ä—É–∑–Ω—ã–µ –ø–æ—á–∞—Ç–∫–∏', hint: '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏', icon: 'üåΩ' },
            { id: 'potato_peels', name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏', hint: '–û–≤–æ—â–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏', icon: 'ü•î' },
            { id: 'watermelon_rind', name: '–ö–æ—Ä–∫–∏ –∞—Ä–±—É–∑–∞', hint: '–û—Å—Ç–∞—Ç–∫–∏ –±–∞—Ö—á–µ–≤—ã—Ö', icon: 'üçâ' },
            { id: 'pumpkin_seeds', name: '–¢—ã–∫–≤–µ–Ω–Ω—ã–µ —Å–µ–º–µ—á–∫–∏', hint: '–°–µ–º–µ–Ω–∞ –æ–≤–æ—â–µ–π', icon: 'üéÉ' },
            { id: 'used_napkins', name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏', hint: '–ë—É–º–∞–∂–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã', icon: 'üßª' },
            { id: 'flower_stems', name: '–°—Ç–µ–±–ª–∏ —Ü–≤–µ—Ç–æ–≤', hint: '–†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏', icon: 'üå∏' }
        ]
    },
    hazardous: {
        name: '–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã',
        items: [
            { id: 'battery', name: '–ë–∞—Ç–∞—Ä–µ–π–∫–∞', hint: '–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã', icon: 'üîã' },
            { id: 'light_bulb', name: '–õ–∞–º–ø–æ—á–∫–∞', hint: '–ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—Ç—É—Ç—å', icon: 'üí°' },
            { id: 'paint', name: '–ö—Ä–∞—Å–∫–∞', hint: '–•–∏–º–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞', icon: 'üé®' },
            { id: 'medicine', name: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞', hint: '–¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏', icon: 'üíä' },
            { id: 'electronics', name: '–°—Ç–∞—Ä—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', hint: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', icon: 'üì±' },
            { id: 'thermometer', name: '–†—Ç—É—Ç–Ω—ã–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä', hint: '–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏', icon: 'üå°Ô∏è' },
            { id: 'motor_oil', name: '–ú–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ', hint: '–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã', icon: '‚ö´' },
            { id: 'antifreeze', name: '–ê–Ω—Ç–∏—Ñ—Ä–∏–∑', hint: '–¢–æ–∫—Å–∏—á–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å', icon: 'üíß' },
            { id: 'pesticides', name: '–ü–µ—Å—Ç–∏—Ü–∏–¥—ã', hint: '–Ø–¥–æ—Ö–∏–º–∏–∫–∞—Ç—ã', icon: '‚ò†Ô∏è' },
            { id: 'printer_cartridge', name: '–ö–∞—Ä—Ç—Ä–∏–¥–∂ –ø—Ä–∏–Ω—Ç–µ—Ä–∞', hint: '–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ —á–µ—Ä–Ω–∏–ª–∞', icon: 'üñ®Ô∏è' },
            { id: 'nail_polish', name: '–õ–∞–∫ –¥–ª—è –Ω–æ–≥—Ç–µ–π', hint: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–∏', icon: 'üíÖ' },
            { id: 'cleaning_products', name: '–ß–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', hint: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ö–∏–º–∏—è', icon: 'üß™' },
            { id: 'car_battery', name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä', hint: '–°–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–∏–Ω–µ—Ü –∏ –∫–∏—Å–ª–æ—Ç—É', icon: 'üöó' },
            { id: 'aerosol_cans', name: '–ê—ç—Ä–æ–∑–æ–ª—å–Ω—ã–µ –±–∞–ª–ª–æ–Ω—á–∏–∫–∏', hint: '–ü–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º', icon: '‚õ´üí®' },
            { id: 'laptop_battery', name: '–ë–∞—Ç–∞—Ä–µ—è –Ω–æ—É—Ç–±—É–∫–∞', hint: '–õ–∏—Ç–∏–π-–∏–æ–Ω–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä', icon: 'üíª' },
            { id: 'fertilizers', name: '–£–¥–æ–±—Ä–µ–Ω–∏—è', hint: '–•–∏–º–∏—á–µ—Å–∫–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞', icon: 'üå±' },
            { id: 'glue', name: '–ö–ª–µ–π', hint: '–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–∏—Ç–µ–ª–∏', icon: 'üóûÔ∏è' },
            { id: 'hair_dye', name: '–ö—Ä–∞—Å–∫–∞ –¥–ª—è –≤–æ–ª–æ—Å', hint: '–•–∏–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∞—Å–∏—Ç–µ–ª–∏', icon: 'üíá' },
            { id: 'varnish', name: '–õ–∞–∫', hint: '–¢–æ–∫—Å–∏—á–Ω—ã–µ –∏—Å–ø–∞—Ä–µ–Ω–∏—è', icon: 'üñåÔ∏è' },
            { id: 'bleach', name: '–û—Ç–±–µ–ª–∏–≤–∞—Ç–µ–ª—å', hint: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ', icon: 'üß¥' }
        ]
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: 'classic',
    score: 0,
    perfectStreak: 0,
    itemsSorted: 0,
    currentItem: null,
    timer: null,
    timeLeft: 0,
    isGameOver: false,
    isProcessing: false,
    mistakesCount: 0,
    comboMultiplier: 1,
    lastCorrectBin: null,
    penaltyTimeout: null,
    usedItems: new Set(),
    mistakeItems: new Set(),
    currentItemsList: [], 
    currentIndex: 0 
};


function handleDrop(binType) {
    if (!gameState.currentItem || gameState.isGameOver || gameState.isProcessing) return;

    gameState.isProcessing = true;
    gameState.itemsSorted++;
    const isCorrect = gameState.currentItem.type === binType;

    if (isCorrect) {
        if (gameState.lastCorrectBin === binType) {
            gameState.comboMultiplier = Math.max(0.5, gameState.comboMultiplier - 0.2);
        } else {
            gameState.comboMultiplier = Math.min(3, gameState.comboMultiplier + 0.5);
        }
        
        const pointsEarned = Math.ceil(gameState.comboMultiplier);
        gameState.score += pointsEarned;
        gameState.perfectStreak++;
        gameState.lastCorrectBin = binType;
        
        showFeedback(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${pointsEarned} ${getComboMessage(gameState.comboMultiplier)}`, true);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        gameState.mistakeItems.add(gameState.currentItem);
        
        gameState.mistakesCount++;
        gameState.perfectStreak = 0;
        gameState.comboMultiplier = 1;
        gameState.lastCorrectBin = null;

        if (gameState.mistakesCount >= 3) {
            applyPenalty();
        }

        showFeedback('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', false);

        if (gameState.mode === 'survival') {
            endGame('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.');
            return;
        }
    }

    updateStats();

    setTimeout(() => {
        gameState.isProcessing = false;
        generateNewItem();
    }, 1500);
}

function generateNewItem() {
    if (gameState.isGameOver) return;

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    if (gameState.currentItemsList.length === 0 || 
        gameState.currentIndex >= gameState.currentItemsList.length) {
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        let newList = [...gameState.mistakeItems];
        gameState.mistakeItems.clear();
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        if (gameState.usedItems.size >= Object.values(wasteDatabase)
            .reduce((sum, cat) => sum + cat.items.length, 0) || 
            gameState.usedItems.size === 0) {
            
            // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
            gameState.usedItems.clear();
            newList.push(...generateItemsList());
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            const remainingItems = generateItemsList().filter(item => 
                !gameState.usedItems.has(item.id)
            );
            newList.push(...remainingItems);
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—â–µ —Ä–∞–∑ –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        gameState.currentItemsList = newList.sort(() => Math.random() - 0.5);
        gameState.currentIndex = 0;
    }

    gameState.currentItem = gameState.currentItemsList[gameState.currentIndex];
    gameState.usedItems.add(gameState.currentItem.id);
    gameState.currentIndex++;

    const currentItemElement = document.getElementById('currentItem');
    currentItemElement.innerHTML = `
        <span style="font-size: 2em; margin-right: 10px;">${gameState.currentItem.icon}</span>
        <span>${gameState.currentItem.name}</span>
        <p id="itemHint" style="display: none;" class="hint"></p>
    `;
}

function generateItemsList() {
    let allItems = [];
    Object.entries(wasteDatabase).forEach(([category, data]) => {
        data.items.forEach(item => {
            allItems.push({
                ...item,
                type: category
            });
        });
    });
    
    return allItems.sort(() => Math.random() - 0.5);
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
function startGame(mode) {
    gameState.mode = mode;
    document.getElementById('welcome').style.display = 'none';
    document.getElementById('gameContent').style.display = 'block';
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const hintButton = document.querySelector('.btn-hint');
    const dictButton = document.querySelector('.btn-dict');
    
    if (mode === 'time' || mode === 'survival') {
        hintButton.style.display = 'none';
    } else {
        hintButton.style.display = 'block';
    }
    
    if (mode === 'survival') {
        dictButton.style.display = 'none';
    } else {
        dictButton.style.display = 'block';
    }
    
    if (mode === 'time') {
        const statsDiv = document.querySelector('.stats');
        const timerDiv = document.createElement('div');
        timerDiv.className = 'timer';
        timerDiv.id = 'timer';
        timerDiv.textContent = '60';
        statsDiv.insertBefore(timerDiv, statsDiv.firstChild);
        startTimer();
    }

    resetGame();
    generateNewItem();
    initializeDictionary();
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—Ä–µ–º—è
function startTimer() {
    gameState.timeLeft = 60;
    gameState.timer = setInterval(() => {
        gameState.timeLeft--;
        document.getElementById('timer').textContent = gameState.timeLeft;
        
        if (gameState.timeLeft <= 0) {
            endGame('–í—Ä–µ–º—è –≤—ã—à–ª–æ!');
        }
    }, 1000);
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    gameState = {
        ...gameState,
        score: 0,
        perfectStreak: 0,
        itemsSorted: 0,
        currentItem: null,
        isGameOver: false,
        isProcessing: false,
        mistakesCount: 0,
        comboMultiplier: 1,
        lastCorrectBin: null,
        usedItems: new Set(),
        mistakeItems: new Set(),
        currentItemsList: [],
        currentIndex: 0
    };
    
    if (gameState.penaltyTimeout) {
        clearTimeout(gameState.penaltyTimeout);
    }
    updateStats();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
function showHint() {
    if (gameState.isGameOver) return;
    
    const hintElement = document.getElementById('itemHint');
    hintElement.textContent = gameState.currentItem.hint;
    hintElement.style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
function handleDrop(binType) {
    if (!gameState.currentItem || gameState.isGameOver || gameState.isProcessing) return;

    gameState.isProcessing = true;
    gameState.itemsSorted++;
    const isCorrect = gameState.currentItem.type === binType;

    if (isCorrect) {
        if (gameState.lastCorrectBin === binType) {
            gameState.comboMultiplier = Math.max(0.5, gameState.comboMultiplier - 0.2);
        } else {
            gameState.comboMultiplier = Math.min(3, gameState.comboMultiplier + 0.5);
        }
        
        const pointsEarned = Math.ceil(gameState.comboMultiplier);
        gameState.score += pointsEarned;
        gameState.perfectStreak++;
        gameState.lastCorrectBin = binType;
        
        showFeedback(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +${pointsEarned} ${getComboMessage(gameState.comboMultiplier)}`, true);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        gameState.mistakeItems.add(gameState.currentItem);
        
        gameState.mistakesCount++;
        gameState.perfectStreak = 0;
        gameState.comboMultiplier = 1;
        gameState.lastCorrectBin = null;

        if (gameState.mistakesCount >= 3) {
            applyPenalty();
        }

        showFeedback('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', false);

        if (gameState.mode === 'survival') {
            endGame('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.');
            return;
        }
    }

    updateStats();

    setTimeout(() => {
        gameState.isProcessing = false;
        generateNewItem();
    }, 1500);
}

function goBack() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (gameState.timer) {
        clearInterval(gameState.timer);
    }
    if (gameState.penaltyTimeout) {
        clearTimeout(gameState.penaltyTimeout);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById('gameContent').style.display = 'none';
    document.getElementById('welcome').style.display = 'block';
    
    // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    const timerElement = document.getElementById('timer');
    if (timerElement) {
        timerElement.remove();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    resetGame();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞
function applyPenalty() {
    const penaltyTime = 5000; // 5 —Å–µ–∫—É–Ω–¥
    gameState.isProcessing = true;
    
    showFeedback('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫! –®—Ç—Ä–∞—Ñ 5 —Å–µ–∫—É–Ω–¥', false);
    
    gameState.penaltyTimeout = setTimeout(() => {
        gameState.isProcessing = false;
        gameState.mistakesCount = 0;
    }, penaltyTime);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–º–±–æ
function getComboMessage(multiplier) {
    if (multiplier >= 3) return 'üî• –°–£–ü–ï–† –ö–û–ú–ë–û!';
    if (multiplier >= 2) return '‚≠ê –ö–û–ú–ë–û!';
    if (multiplier <= 0.5) return '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã!';
    return '';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–Ω–µ—É–¥–∞—á–µ
function showFeedback(message, isSuccess) {
    const feedbackElement = document.getElementById('feedback');
    feedbackElement.textContent = message;
    feedbackElement.className = `feedback ${isSuccess ? 'success' : 'error'}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('score').textContent = gameState.score;
    document.getElementById('streak').textContent = gameState.perfectStreak;
    document.getElementById('sorted').textContent = gameState.itemsSorted;
    
    const multiplierDisplay = gameState.comboMultiplier > 1 ? 
        ` (x${gameState.comboMultiplier.toFixed(1)})` : '';
    document.getElementById('score').textContent += multiplierDisplay;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame(message) {
    gameState.isGameOver = true;
    if (gameState.timer) {
        clearInterval(gameState.timer);
    }
    if (gameState.penaltyTimeout) {
        clearTimeout(gameState.penaltyTimeout);
    }

    const currentItem = document.getElementById('currentItem');
    currentItem.innerHTML = `
        <div class="game-over">
            <h2>${message}</h2>
            <p>–í–∞—à —Å—á—ë—Ç: ${gameState.score}</p>
            <button class="btn btn-start" onclick="restartGame()">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    document.getElementById('dictionary').classList.add('game-over-active');
}

function restartGame() {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (gameState.timer) {
        clearInterval(gameState.timer);
    }
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    document.getElementById('dictionary').classList.remove('game-over-active');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    resetGame();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—Ä–µ–º—è
    if (gameState.mode === 'time') {
        startTimer();
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    generateNewItem();
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
function initializeDictionary() {
    const dictionaryContent = document.getElementById('dictionaryContent');
    dictionaryContent.innerHTML = '';

    Object.entries(wasteDatabase).forEach(([category, data]) => {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'dictionary-category';
        
        categoryDiv.innerHTML = `
            <h3>${data.name}</h3>
            ${data.items.map(item => `
                <div class="dictionary-item">
                    <span style="font-size: 1.5em; margin-right: 10px;">${item.icon}</span>
                    <span>${item.name}</span>
                    <span class="hint">${item.hint}</span>
                </div>
            `).join('')}
        `;
        
        dictionaryContent.appendChild(categoryDiv);
    });
}

/// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
function toggleDictionary() {
    if (gameState.isGameOver) return;
    const dictionary = document.getElementById('dictionary');
    dictionary.classList.toggle('active');
}